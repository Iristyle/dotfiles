# partially inspired by
# https://git.wiki.kernel.org/index.php/Aliases
# https://gist.github.com/oli/1637874
# https://gist.github.com/bradwilson/4215933
[user]
	name = Iristyle
	email = Iristyle@github
[alias]
	aliases = config --get-regexp alias
	amend = commit --amend
	bl = blame -w -M -C
	bra = branch -rav
	branches = branch -rav
	changed = status -sb
	# List contributors with number of commits
	contributors = shortlog --summary --numbered
	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	deletemerged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	f = !git ls-files | grep -i
	filelog = log -u
	# Find branches containing commit
	findbranch = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	findtag = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	findcommit = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	findmessage = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
  # Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	hist = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue) [%an]%Creset' --abbrev-commit --date=relative
	filehist = log --format=format:'%C(bold cyan)%ar %C(reset) %C(green)%f' --name-status
	last = log -p --max-count=1 --word-diff
	lastref = rev-parse --short HEAD
	lasttag = describe --tags --abbrev=0
	pick = add -p
	remotes = remote -v show
	stage = add
	standup = ! git log --since yesterday --oneline --author $(git config --global --get user.name)
	stats = diff --stat
	sync = ! git fetch upstream -v && git fetch origin -v && git checkout master && git merge upstream/master
	undo = reset head~
	unstage = reset HEAD
	wdiff = diff --word-diff
	who = shortlog -s -e --
	branchdate = ! git for-each-ref --sort=-committerdate refs/heads/ --format='%(committerdate:short)%09%(authorname)%09%(refname:short)' | less
    recent = "!r() { cur=$(git rev-parse --abbrev-ref HEAD); git for-each-ref --sort=-committerdate refs/heads/ --format='%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' | sed \"s/m${cur}|/m* ${cur}|/\" | column -ts'|'; }; r"
	find = log --all --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue) [%an]%Creset%n%n%b%Creset' --name-status --grep
	sortdiff = !sh -c git diff \"$@\" | grep \"^[+-]\" | sort --key=1.2 | uniq -u -s1
    # fwd = ! git checkout `git log --reverse --ancestry-path HEAD..master | head -n 1 | cut -d \ -f 2`
	rwd = checkout HEAD~
[core]
	attributesfile = ~/.gitattributes
	excludesfile = ~/.gitignore
	autocrlf = false
	safecrlf = false
	# editor = subl -w
	editor = vim
	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Users/Iristyle/Library/Application Support/SourceTree/SourceTree 1.8.0.2/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[pack]
	packSizeLimit = 2g
[help]
	format = html
	# Automatically correct and execute mistyped commands
	autocorrect = 1
[rebase]
	autosquash = true
[github]
	user = Iristyle
	token =
[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = true

[color "branch"]
	current = yellow reverse
	local = green
	remote = cyan

[color "diff"]
	meta = yellow bold
	# frag = magenta bold # line info
	# old = red # deletions
	# new = green # additions

[color "status"]
# 	added = yellow
# 	changed = green
	untracked = cyan

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C
[mergetool "DiffMerge"]
	cmd = /usr/local/bin/diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\" --title1=\"Mine\" --title2=\"Merging to: $MERGED\" --title3=\"Theirs\"
	trustExitCode = true
[difftool "DiffMerge"]
	cmd = /usr/local/bin/diffmerge \"$LOCAL\" \"$REMOTE\" --title1=\"Previous [$LOCAL]\" --title2=\"Current ($REMOTE)\"
[merge]
	tool = DiffMerge
	# Include summaries of merged commits in newly created merge commit messages
	log = true
[mergetool]
	keepBackup = false
	prompt = false
[diff]
	tool = DiffMerge
	guitool = DiffMerge
	algorithm = histogram
	renames = copies
[difftool]
	prompt = false
[push]
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
[credential]
	helper = osxkeychain
[url "https://github.com/"]
	insteadOf = git@github.com:
[url "https://"]
	insteadOf = git://
[fetch]
	prune = true
