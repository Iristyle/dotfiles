#!/usr/bin/env bash

# -------------------------------------------------------------------
# console function
# -------------------------------------------------------------------
function console () {
	if [[ $# > 0 ]]; then
		query=$(echo "$*"|tr -s ' ' '|')
		tail -f /var/log/system.log|grep -i --color=auto -E "$query"
	else
		tail -f /var/log/system.log
	fi
}

# --------------------------------------------------------------------
# ps with a grep
# from http://hiltmon.com/blog/2013/07/30/quick-process-search/
# --------------------------------------------------------------------
function psgrep() {
		if [ ! -z $1 ] ; then
				echo "Grepping for processes matching $1..."
				ps auxwwwh | grep "$@" | grep -v grep
		else
				echo "!! Need name to grep for"
		fi
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# -------------------------------------------------------------------
# Show how much RAM application uses.
# $ ram safari
# # => safari uses 154.69 MBs of RAM.
# from https://github.com/paulmillr/dotfiles
# -------------------------------------------------------------------
function ram() {
	local sum
	local items
	local app="$1"
	if [ -z "$app" ]; then
		echo "First argument - pattern to grep from processes"
	else
		sum=0
		for i in `ps aux | grep -i "$app" | grep -v "grep" | awk '{print $6}'`; do
			sum=$(($i + $sum))
		done
		sum=$(echo "scale=2; $sum / 1024.0" | bc)
		if [[ $sum != "0" ]]; then
			echo "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM."
		else
			echo "There are no processes with pattern '${fg[blue]}${app}${reset_color}' are running."
		fi
	fi
}

# -------------------------------------------------------------------
# myIP addresses
# -------------------------------------------------------------------
function ips () {
		# determine local IP address
		ifconfig | grep "inet " | awk '{ print $2 }'
}

function myip() {
	ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
	ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
	ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
	ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
	ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# -------------------------------------------------------------------
# Mac specific functions
# -------------------------------------------------------------------
if [[ $(uname) = 'Darwin' ]]; then
		# Change working directory to the top-most Finder window location
		function cdf() { # short for `cdfinder`
			cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
		}

		# view man pages in Preview
		function pman() { ps=`mktemp -t manpageXXXX`.ps ; man -t $@ > "$ps" ; open "$ps" ; }

		# function to show interface IP assignments
		# ips() { foo=`/Users/mark/bin/getip.py; /Users/mark/bin/getip.py en0; /Users/mark/bin/getip.py en1`; echo $foo; }

		# Remote Mount (sshfs)
		# creates mount folder and mounts the remote filesystem
		function rmount() {
			local host folder mname
			host="${1%%:*}:"
			[[ ${1%:} == ${host%%:*} ]] && folder='' || folder=${1##*:}
			if [[ -n $2 ]]; then
				mname=$2
			else
				mname=${folder##*/}
				[[ "$mname" == "" ]] && mname=${host%%:*}
			fi
			if [[ $(grep -i "host ${host%%:*}" ~/.ssh/config) != '' ]]; then
				mkdir -p ~/mounts/$mname > /dev/null
				sshfs $host$folder ~/mounts/$mname -oauto_cache,reconnect,defer_permissions,negative_vncache,volname=$mname,noappledouble && echo "mounted ~/mounts/$mname"
			else
				echo "No entry found for ${host%%:*}"
				return 1
			fi
		}

		# Remote Umount, unmounts and deletes local folder (experimental, watch you step)
		function rumount() {
			if [[ $1 == "-a" ]]; then
				ls -1 ~/mounts/|while read dir
				do
					[[ -d $(mount|grep "mounts/$dir") ]] && umount ~/mounts/$dir
					[[ -d $(ls ~/mounts/$dir) ]] || rm -rf ~/mounts/$dir
				done
			else
				[[ -d $(mount|grep "mounts/$1") ]] && umount ~/mounts/$1
				[[ -d $(ls ~/mounts/$1) ]] || rm -rf ~/mounts/$1
			fi
		}

		function restart_audio() {
			sudo kextunload /System/Library/Extensions/AppleHDA.kext
			sudo kextload /System/Library/Extensions/AppleHDA.kext
		}

		# Open argument in Dash
		function dash() {
			open "dash://$*"
		}

		function dman() {
			open "dash://man:$*"
		}
fi

# -------------------------------------------------------------------
# nice mount (http://catonmat.net/blog/another-ten-one-liners-from-commandlingfu-explained)
# displays mounted drive information in a nicely formatted manner
# -------------------------------------------------------------------
function nicemount() { (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2="";1') | column -t ; }

function docker-start {
	typeset vm=${1:-default} sts
	case $vm in
		-h|--help)
			echo $'usage: docker-start [<vm>]\n\nEnsures that the specified/default Docker VM is started\nand the environment is initialized.'
			return 0
			;;
	esac
	sts=$(docker-machine status "$vm") || return
	[[ $sts == 'Running' ]] && echo "(Docker VM '$vm' is already running.)" || {
		echo "-- Starting Docker VM '$vm' (\`docker-machine start "$vm"\`; this will take a while)...";
		docker-machine start "$vm" || return
	}
	echo "-- Setting DOCKER_* environment variables (\`eval \"\$(docker-machine env "$vm")\"\`)..."
	# Note: If the machine hasn't fully finished starting up yet from a
	#       previously launched-but-not-waited-for-completion `docker-machine status`,
	#       the following may output error messages; alas, without signaling failure
	#       via the exit code. Simply rerun this function to retry.
	eval "$(docker-machine env "$vm")" || return
	export | grep -o 'DOCKER_.*'
	echo "-- Docker VM '$vm' is running."
}

function docker-stop {
	typeset vm=${1:-default} sts envVarNames fndx
	case $vm in
		-h|--help)
			echo $'usage: docker-stop [<vm>]\n\nEnsures that the specified/default Docker VM is stopped\nand the environment is cleaned up.'
			return 0
			;;
	esac
	sts=$(docker-machine status "$vm") || return
	[[ $sts == 'Running' ]] && {
		echo "-- Stopping Docker VM '$vm' (\`docker-machine stop "$vm"\`)...";
		docker-machine stop "$vm" || return
	} || echo "(Docker VM '$vm' is not running.)"
	[[ -n $BASH_VERSION ]] && fndx=3 || fndx=1 # Bash prefixes defs. wit 'declare -x '
	envVarNames=( $(export | awk -v fndx="$fndx" '$fndx ~ /^DOCKER_/ { sub(/=.*/,"", $fndx); print $fndx }') )
	if [[ -n $envVarNames ]]; then
		echo "-- Unsetting DOCKER_* environment variables ($(echo "${envVarNames[@]}" | sed 's/ /, /g'))..."
		unset "${envVarNames[@]}"
	else
		echo "(No DOCKER_* environment variables to unset.)"
	fi
	echo "-- Docker VM '$vm' is stopped."
}
